{"version":3,"sources":["Component/Common/Loading.js","Component/Common/Scroll.js","Component/ChannelList/Search.js","Component/ChannelList/Name.js","Component/ChannelList/NameList.js","Component/ChannelList/NoChannel.js","Component/ChannelList/NewsChannels.js","Component/News/Card.js","Component/News/CardList.js","Component/News/NewsCard.js","Component/NotFound/NotFound.js","Container/App.js","serviceWorker.js","index.js"],"names":["Loading","react_default","a","createElement","className","role","style","position","overflowY","border","maxHeight","minWidth","Scroll","props","children","Search","_ref","onSearchChange","type","onChange","aria-label","aria-describedby","withRouter","id","news","history","onClick","push","concat","scope","NameList","channels","map","channel","i","ChannelList_Name","key","name","NoChannel","length","NewsChannels","state","searchQuery","loading","componentDidMount","fetch","process","then","response","json","data","_this","setState","sources","event","target","value","_this$state","this","Common_Loading","filteredChannels","filter","toLowerCase","includes","ChannelList_Search","Common_Scroll","ChannelList_NameList","ChannelList_NoChannel","Component","Card","title","description","maxWidth","CardList","articles","article","News_Card","NewsCard","_this2","match","params","News_CardList","NotFound","textAlign","marginTop","App","react_router_dom","react_router","path","component","exact","Boolean","window","location","hostname","ReactDOM","render","src_Container_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.67f4eb15.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Loading = () => {\r\n    return (\r\n        <div className=\"d-flex justify-content-center\">\r\n            <div className=\"spinner-border\" role=\"status\">\r\n                <span className=\"sr-only\">Loading...</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loading;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={ style }>\r\n      {props.children}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst style ={\r\n    position: \"fixed\",\r\n    overflowY: \"scroll\",\r\n    border: \"2px solid rgba(0,0,0,0.3)\", \r\n    maxHeight: \"75%\",\r\n    minWidth: \"100%\"\r\n}\r\n\r\nexport default Scroll;","import React from \"react\";\r\n\r\nconst Search = ({ onSearchChange }) => {\r\n    return (\r\n        <div className=\"w-50 mx-auto input-group input-group-sm mb-3\">\r\n            <input type=\"text\" onChange={onSearchChange} className=\"form-control text-center font-weight-bolder\" aria-label=\"Sizing example input\" aria-describedby=\"inputGroup-sizing-default\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search;","import React from \"react\";\r\nimport { withRouter } from \"react-router-dom\"\r\n\r\nconst Name = ({ id , news , history }) => {\r\n    return (\r\n        <table className=\"table table-striped table-dark table-hover text-center\">\r\n            <tbody>\r\n            <tr onClick={() => history.push(`/source/${id}`)}>\r\n                <th scope=\"row\">{news}</th>\r\n            </tr>\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\nexport default withRouter(Name);\r\n\r\n","import React from \"react\";\r\nimport Name from \"./Name\"\r\n\r\nconst NameList = ({ channels }) => {\r\n    return (\r\n        <div>\r\n        {\r\n            channels.map((channel,i) => {\r\n            return (\r\n            <Name \r\n            key={channels[i].id}\r\n            id={channels[i].id}\r\n            news={channels[i].name}\r\n            />\r\n            )\r\n            })\r\n        }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NameList;","import React from \"react\";\r\n\r\nconst NoChannel = ( { channels }) => {\r\n    return (\r\n        <div>\r\n        {\r\n        (channels.length === 0) ? \r\n            <div>\r\n                <table className=\"table table-striped table-dark table-hover text-center\">\r\n                    <tbody>\r\n                    <tr>\r\n                        <th scope=\"row\">No Result Found</th>\r\n                    </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div> : null\r\n        }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NoChannel;","import React , {Component} from \"react\";\r\nimport Loading from \"../Common/Loading\";\r\nimport Scroll from \"../Common/Scroll\";\r\nimport Search from \"./Search\";\r\nimport NameList from \"./NameList\";\r\nimport NoChannel from \"./NoChannel\"\r\n\r\nclass NewsChannels extends Component {\r\n    state = {\r\n        channels:[],\r\n        searchQuery:\"\",\r\n        loading: true\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        const api = process.env.REACT_APP_API;\r\n\r\n        fetch(`https://newsapi.org/v2/sources?apiKey=${api}`)\r\n        .then(response=> response.json())\r\n        .then(data => {this.setState({ channels: data.sources , loading: false})})\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({ searchQuery: event.target.value })\r\n    }\r\n\r\n    render() {\r\n        let { channels , searchQuery , loading } = this.state;\r\n        // Runs this while data is being fetched from news api\r\n        if (loading) {\r\n            return <Loading />\r\n        }\r\n\r\n        // Runs this when data is fetched\r\n        else {\r\n        const filteredChannels = channels.filter(channel =>{\r\n            return channel.name.toLowerCase().includes(searchQuery.toLowerCase());\r\n        })\r\n        return (\r\n            <div>\r\n                <Search onSearchChange={this.onSearchChange} />\r\n                { /* Runs this , if theres any matching channel with search result */ }\r\n                <Scroll>\r\n                        <NameList channels={filteredChannels} />\r\n                </Scroll>\r\n                { /* Runs this , if theres no matching channel with search result */ }\r\n                <NoChannel channels={filteredChannels} />\r\n            </div>\r\n        )\r\n    }\r\n    \r\n    }\r\n\r\n}\r\n\r\nexport default NewsChannels;","import React from \"react\";\r\n\r\nconst Card = ({ title , description }) => {\r\n    return (\r\n        <div className=\"card text-white bg-dark mb-3\" style={{maxWidth: \"90rem\"}}>\r\n            <div className=\"card-header\">{title}</div>\r\n            <div className=\"card-body\">\r\n                <p className=\"card-text\">{description}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\"\r\n\r\nconst CardList = ({ articles }) => {\r\n    return (\r\n        <div>\r\n        {\r\n            articles.map((article,i) => {\r\n            return (\r\n            <Card\r\n            key={articles[i].title}\r\n            title={articles[i].title}\r\n            description={articles[i].description}\r\n            />\r\n            )\r\n            })\r\n        }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList;","import React , {Component} from \"react\";\r\nimport Loading from \"../Common/Loading\";\r\nimport Scroll from \"../Common/Scroll\";\r\nimport CardList from \"./CardList\"\r\n\r\n\r\nclass NewsCard extends Component {\r\n    state = {\r\n        articles: [],\r\n        loading: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        const api = process.env.REACT_APP_API;\r\n        const id = this.props.match.params.id;\r\n\r\n        this.setState({ loading : true })\r\n\r\n        fetch(`https://newsapi.org/v2/everything?sources=${id}&apiKey=${api}`)\r\n        .then(response => response.json())\r\n        .then(data => {this.setState({ articles : data.articles , loading : false})})\r\n    }\r\n\r\n    render() {\r\n        let { articles , loading } = this.state;\r\n        // Runs this while data is being fetched from news api\r\n        if (loading) {\r\n            return <Loading />\r\n        }\r\n\r\n        // Runs this when data is fetched\r\n        else {\r\n            return (\r\n                <div>\r\n                    <Scroll>\r\n                            <CardList articles={articles} />\r\n                    </Scroll>\r\n                </div>\r\n            )\r\n        }\r\n    \r\n    }\r\n\r\n}\r\n\r\nexport default NewsCard;","import React from \"react\";\r\n\r\nconst NotFound = () => {\r\n    return (\r\n        <h1 style={{textAlign:\"center\",marginTop:\"200px\"}}>Page Not Found</h1>\r\n    )\r\n}\r\n\r\nexport default NotFound;","import React from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport NewsChannels from \"../Component/ChannelList/NewsChannels\";\nimport NewsCard from \"../Component/News/NewsCard\";\nimport NotFound from \"../Component/NotFound/NotFound\";\nimport \"./App.css\";\n\nconst App = () => {\n    return (\n      \n      <BrowserRouter>\n            <div className=\"app\">\n                <header>\n                    <h2 className=\"text-center m-3 font-weight-bolder\">News App</h2>\n                </header>\n\n                <Switch>\n                    <Route path=\"/\" component={NewsChannels} exact />\n                    <Route path=\"/source/:id\" component={NewsCard} exact />\n                    <Route component={NotFound} exact />\n                </Switch>\n\n                <footer className=\"text-center m-2 fixed-bottom font-weight-bolder\">\n                    <h5>Powered by News API</h5>\n                </footer>\n            </div>\n      </BrowserRouter>\n\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./Container/App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}